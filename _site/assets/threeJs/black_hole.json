{
  "id": 6890,
  "name": "New Composed Shader",
  "fragment": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nuniform vec3 color;\nuniform vec3 lightPosition;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nfloat random1(float value) \n                                                                                {\n                                                                                    return fract(sin((0.3 - value) / 0.3 * 12.9898) * 43758.5453);\n                                                                                }\nvec4 Fork_of_New_Basic_Shader1709172993534_269_main() \n                                                                                {\n                                                                                    vec4 Fork_of_New_Basic_Shader1709172993534_269_gl_FragColor = vec4(0.0);\n                                                                                    float param = 0.7;\n                                                                                    vec3 worldPosition = (modelMatrix * vec4(vPosition, 1.0)).xyz;\n                                                                                    vec3 lightVector = normalize(lightPosition - worldPosition);\n                                                                                    vec3 viewVector = normalize(worldPosition - cameraPosition);\n                                                                                    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n                                                                                    float angle = dot(lightVector, viewVector);\n                                                                                    if (angle < param) \n                                                                                    {\n                                                                                        if (angle > 0.05 && angle < 0.1) \n                                                                                        {\n                                                                                            color = vec4(1.0, 1.0, 1.0, 0.1);\n                                                                                        }\n else if (angle > 0.13 && angle < 0.14) \n                                                                                        {\n                                                                                            color = vec4(1.0, 1.0, 1.0, 0.4);\n                                                                                        }\n else if (angle > 0.23 && angle < 0.25) \n                                                                                        {\n                                                                                            color = vec4(1.0, 1.0, 1.0, 0.7);\n                                                                                        }\n else if (angle > 0.3 && angle < 0.34) \n                                                                                        {\n                                                                                            color = vec4(1.0, 1.0, 1.0, 0.6);\n                                                                                        }\n else if (angle > 0.37 && angle < 0.38) \n                                                                                        {\n                                                                                            color = vec4(1.0, 1.0, 1.0, 0.7);\n                                                                                        }\n else if (angle > 0.4 && angle < 0.45) \n                                                                                        {\n                                                                                            color = vec4(1.0, 1.0, 1.0, 0.8);\n                                                                                        }\n else if (angle > 0.5 && angle < 0.6) \n                                                                                        {\n                                                                                            color = vec4(1.0, 1.0, 1.0, 1.0);\n                                                                                        }\n else \n                                                                                        {\n                                                                                            color = vec4(0.0, 0.0, 0.0, 0.9);\n                                                                                        }\n                                                                                    }\n else if (angle > 0.7 && angle < 0.71) \n                                                                                    {\n                                                                                        color = vec4(1.0, 1.0, 1.0, 1.0);\n                                                                                    }\n                                                                                     Fork_of_New_Basic_Shader1709172993534_269_gl_FragColor = color;\n                                                                                    return Fork_of_New_Basic_Shader1709172993534_269_gl_FragColor *= 1.0;\n                                                                                }\nvoid main() \n                                                                                {\n                                                                                    gl_FragColor = Fork_of_New_Basic_Shader1709172993534_269_main();                                                                                }\n",
  "vertex": "precision highp float;\nprecision highp int;\nuniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nuniform float time;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec2 vUv2;\nvec4 Fork_of_New_Basic_Shader1709172993534_269_main() \n                                                                                {\n                                                                                    vec4 Fork_of_New_Basic_Shader1709172993534_269_gl_Position = vec4(0.0);\n                                                                                    vNormal = normal;\n                                                                                    vUv = uv;\n                                                                                    vUv2 = uv2;\n                                                                                    vPosition = position;\n                                                                                    Fork_of_New_Basic_Shader1709172993534_269_gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n                                                                                    return Fork_of_New_Basic_Shader1709172993534_269_gl_Position *= 1.0;\n                                                                                }\nvoid main() \n                                                                                {\n                                                                                    gl_Position = Fork_of_New_Basic_Shader1709172993534_269_main();                                                                                }\n",
  "uniforms": {
    "cameraPosition": {
      "type": "v3",
      "glslType": "vec3"
    },
    "time": {
      "type": "f",
      "glslType": "float"
    },
    "lightPosition": {
      "value": {
        "x": 0,
        "y": 0,
        "z": 0
      },
      "type": "v3",
      "glslType": "vec3"
    },
    "color": {
      "value": {
        "r": 0.14945348348320087,
        "g": 0.08629691800628647,
        "b": 0.27906101529795224
      },
      "type": "c",
      "glslType": "vec3"
    }
  },
  "url": "http://shaderfrog.com/app/view/6890",
  "user": {
    "username": "young",
    "url": "http://shaderfrog.com/app/profile/andrewray"
  }
}